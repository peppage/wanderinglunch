// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Spot is an object representing the database table.
type Spot struct {
	TruckID    string `boil:"truck_id" json:"truck_id" toml:"truck_id" yaml:"truck_id"`
	LocationID int64  `boil:"location_id" json:"location_id" toml:"location_id" yaml:"location_id"`
	TweetID    string `boil:"tweet_id" json:"tweet_id" toml:"tweet_id" yaml:"tweet_id"`

	R *spotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L spotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpotColumns = struct {
	TruckID    string
	LocationID string
	TweetID    string
}{
	TruckID:    "truck_id",
	LocationID: "location_id",
	TweetID:    "tweet_id",
}

// spotR is where relationships are stored.
type spotR struct {
	Truck    *Truck
	Location *Location
	Tweet    *Tweet
}

// NewStruct creates a new relationship struct
func (*spotR) NewStruct() *spotR {
	return &spotR{}
}

// spotL is where Load methods for each relationship are stored.
type spotL struct{}

var (
	spotColumns               = []string{"truck_id", "location_id", "tweet_id"}
	spotColumnsWithoutDefault = []string{"truck_id", "location_id", "tweet_id"}
	spotColumnsWithDefault    = []string{}
	spotPrimaryKeyColumns     = []string{"location_id", "tweet_id"}
)

type (
	// SpotSlice is an alias for a slice of pointers to Spot.
	// This should generally be used opposed to []Spot.
	SpotSlice []*Spot
	// SpotHook is the signature for custom Spot hook methods
	SpotHook func(context.Context, boil.ContextExecutor, *Spot) error

	spotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	spotType                 = reflect.TypeOf(&Spot{})
	spotMapping              = queries.MakeStructMapping(spotType)
	spotPrimaryKeyMapping, _ = queries.BindMapping(spotType, spotMapping, spotPrimaryKeyColumns)
	spotInsertCacheMut       sync.RWMutex
	spotInsertCache          = make(map[string]insertCache)
	spotUpdateCacheMut       sync.RWMutex
	spotUpdateCache          = make(map[string]updateCache)
	spotUpsertCacheMut       sync.RWMutex
	spotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var spotBeforeInsertHooks []SpotHook
var spotBeforeUpdateHooks []SpotHook
var spotBeforeDeleteHooks []SpotHook
var spotBeforeUpsertHooks []SpotHook

var spotAfterInsertHooks []SpotHook
var spotAfterSelectHooks []SpotHook
var spotAfterUpdateHooks []SpotHook
var spotAfterDeleteHooks []SpotHook
var spotAfterUpsertHooks []SpotHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Spot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Spot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Spot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Spot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Spot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Spot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Spot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Spot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Spot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range spotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpotHook registers your hook function for all future operations.
func AddSpotHook(hookPoint boil.HookPoint, spotHook SpotHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		spotBeforeInsertHooks = append(spotBeforeInsertHooks, spotHook)
	case boil.BeforeUpdateHook:
		spotBeforeUpdateHooks = append(spotBeforeUpdateHooks, spotHook)
	case boil.BeforeDeleteHook:
		spotBeforeDeleteHooks = append(spotBeforeDeleteHooks, spotHook)
	case boil.BeforeUpsertHook:
		spotBeforeUpsertHooks = append(spotBeforeUpsertHooks, spotHook)
	case boil.AfterInsertHook:
		spotAfterInsertHooks = append(spotAfterInsertHooks, spotHook)
	case boil.AfterSelectHook:
		spotAfterSelectHooks = append(spotAfterSelectHooks, spotHook)
	case boil.AfterUpdateHook:
		spotAfterUpdateHooks = append(spotAfterUpdateHooks, spotHook)
	case boil.AfterDeleteHook:
		spotAfterDeleteHooks = append(spotAfterDeleteHooks, spotHook)
	case boil.AfterUpsertHook:
		spotAfterUpsertHooks = append(spotAfterUpsertHooks, spotHook)
	}
}

// One returns a single spot record from the query.
func (q spotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Spot, error) {
	o := &Spot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for spots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Spot records from the query.
func (q spotQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpotSlice, error) {
	var o []*Spot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Spot slice")
	}

	if len(spotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Spot records in the query.
func (q spotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count spots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q spotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if spots exists")
	}

	return count > 0, nil
}

// Truck pointed to by the foreign key.
func (o *Spot) Truck(mods ...qm.QueryMod) truckQuery {
	queryMods := []qm.QueryMod{
		qm.Where("twitname=?", o.TruckID),
	}

	queryMods = append(queryMods, mods...)

	query := Trucks(queryMods...)
	queries.SetFrom(query.Query, "\"trucks\"")

	return query
}

// Location pointed to by the foreign key.
func (o *Spot) Location(mods ...qm.QueryMod) locationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LocationID),
	}

	queryMods = append(queryMods, mods...)

	query := Locations(queryMods...)
	queries.SetFrom(query.Query, "\"locations\"")

	return query
}

// Tweet pointed to by the foreign key.
func (o *Spot) Tweet(mods ...qm.QueryMod) tweetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TweetID),
	}

	queryMods = append(queryMods, mods...)

	query := Tweets(queryMods...)
	queries.SetFrom(query.Query, "\"tweets\"")

	return query
}

// LoadTruck allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spotL) LoadTruck(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpot interface{}, mods queries.Applicator) error {
	var slice []*Spot
	var object *Spot

	if singular {
		object = maybeSpot.(*Spot)
	} else {
		slice = *maybeSpot.(*[]*Spot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spotR{}
		}
		args = append(args, object.TruckID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spotR{}
			}

			for _, a := range args {
				if a == obj.TruckID {
					continue Outer
				}
			}

			args = append(args, obj.TruckID)
		}
	}

	query := NewQuery(qm.From(`trucks`), qm.WhereIn(`twitname in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Truck")
	}

	var resultSlice []*Truck
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Truck")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trucks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trucks")
	}

	if len(spotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Truck = foreign
		if foreign.R == nil {
			foreign.R = &truckR{}
		}
		foreign.R.Spots = append(foreign.R.Spots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TruckID == foreign.Twitname {
				local.R.Truck = foreign
				if foreign.R == nil {
					foreign.R = &truckR{}
				}
				foreign.R.Spots = append(foreign.R.Spots, local)
				break
			}
		}
	}

	return nil
}

// LoadLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spotL) LoadLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpot interface{}, mods queries.Applicator) error {
	var slice []*Spot
	var object *Spot

	if singular {
		object = maybeSpot.(*Spot)
	} else {
		slice = *maybeSpot.(*[]*Spot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spotR{}
		}
		args = append(args, object.LocationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spotR{}
			}

			for _, a := range args {
				if a == obj.LocationID {
					continue Outer
				}
			}

			args = append(args, obj.LocationID)
		}
	}

	query := NewQuery(qm.From(`locations`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Location")
	}

	var resultSlice []*Location
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Location")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for locations")
	}

	if len(spotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Location = foreign
		if foreign.R == nil {
			foreign.R = &locationR{}
		}
		foreign.R.Spots = append(foreign.R.Spots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocationID == foreign.ID {
				local.R.Location = foreign
				if foreign.R == nil {
					foreign.R = &locationR{}
				}
				foreign.R.Spots = append(foreign.R.Spots, local)
				break
			}
		}
	}

	return nil
}

// LoadTweet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (spotL) LoadTweet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpot interface{}, mods queries.Applicator) error {
	var slice []*Spot
	var object *Spot

	if singular {
		object = maybeSpot.(*Spot)
	} else {
		slice = *maybeSpot.(*[]*Spot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &spotR{}
		}
		args = append(args, object.TweetID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &spotR{}
			}

			for _, a := range args {
				if a == obj.TweetID {
					continue Outer
				}
			}

			args = append(args, obj.TweetID)
		}
	}

	query := NewQuery(qm.From(`tweets`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tweet")
	}

	var resultSlice []*Tweet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tweet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tweets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tweets")
	}

	if len(spotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tweet = foreign
		if foreign.R == nil {
			foreign.R = &tweetR{}
		}
		foreign.R.Spots = append(foreign.R.Spots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TweetID == foreign.ID {
				local.R.Tweet = foreign
				if foreign.R == nil {
					foreign.R = &tweetR{}
				}
				foreign.R.Spots = append(foreign.R.Spots, local)
				break
			}
		}
	}

	return nil
}

// SetTruck of the spot to the related item.
// Sets o.R.Truck to related.
// Adds o to related.R.Spots.
func (o *Spot) SetTruck(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Truck) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"spots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"truck_id"}),
		strmangle.WhereClause("\"", "\"", 2, spotPrimaryKeyColumns),
	)
	values := []interface{}{related.Twitname, o.LocationID, o.TweetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TruckID = related.Twitname
	if o.R == nil {
		o.R = &spotR{
			Truck: related,
		}
	} else {
		o.R.Truck = related
	}

	if related.R == nil {
		related.R = &truckR{
			Spots: SpotSlice{o},
		}
	} else {
		related.R.Spots = append(related.R.Spots, o)
	}

	return nil
}

// SetLocation of the spot to the related item.
// Sets o.R.Location to related.
// Adds o to related.R.Spots.
func (o *Spot) SetLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Location) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"spots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"location_id"}),
		strmangle.WhereClause("\"", "\"", 2, spotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LocationID, o.TweetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocationID = related.ID
	if o.R == nil {
		o.R = &spotR{
			Location: related,
		}
	} else {
		o.R.Location = related
	}

	if related.R == nil {
		related.R = &locationR{
			Spots: SpotSlice{o},
		}
	} else {
		related.R.Spots = append(related.R.Spots, o)
	}

	return nil
}

// SetTweet of the spot to the related item.
// Sets o.R.Tweet to related.
// Adds o to related.R.Spots.
func (o *Spot) SetTweet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tweet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"spots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tweet_id"}),
		strmangle.WhereClause("\"", "\"", 2, spotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LocationID, o.TweetID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TweetID = related.ID
	if o.R == nil {
		o.R = &spotR{
			Tweet: related,
		}
	} else {
		o.R.Tweet = related
	}

	if related.R == nil {
		related.R = &tweetR{
			Spots: SpotSlice{o},
		}
	} else {
		related.R.Spots = append(related.R.Spots, o)
	}

	return nil
}

// Spots retrieves all the records using an executor.
func Spots(mods ...qm.QueryMod) spotQuery {
	mods = append(mods, qm.From("\"spots\""))
	return spotQuery{NewQuery(mods...)}
}

// FindSpot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpot(ctx context.Context, exec boil.ContextExecutor, locationID int64, tweetID string, selectCols ...string) (*Spot, error) {
	spotObj := &Spot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"spots\" where \"location_id\"=$1 AND \"tweet_id\"=$2", sel,
	)

	q := queries.Raw(query, locationID, tweetID)

	err := q.Bind(ctx, exec, spotObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from spots")
	}

	return spotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Spot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	spotInsertCacheMut.RLock()
	cache, cached := spotInsertCache[key]
	spotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			spotColumns,
			spotColumnsWithDefault,
			spotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(spotType, spotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(spotType, spotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"spots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"spots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into spots")
	}

	if !cached {
		spotInsertCacheMut.Lock()
		spotInsertCache[key] = cache
		spotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Spot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Spot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	spotUpdateCacheMut.RLock()
	cache, cached := spotUpdateCache[key]
	spotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			spotColumns,
			spotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update spots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"spots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, spotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(spotType, spotMapping, append(wl, spotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update spots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for spots")
	}

	if !cached {
		spotUpdateCacheMut.Lock()
		spotUpdateCache[key] = cache
		spotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q spotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for spots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for spots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"spots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, spotPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in spot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all spot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Spot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no spots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(spotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	spotUpsertCacheMut.RLock()
	cache, cached := spotUpsertCache[key]
	spotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			spotColumns,
			spotColumnsWithDefault,
			spotColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			spotColumns,
			spotPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert spots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(spotPrimaryKeyColumns))
			copy(conflict, spotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"spots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(spotType, spotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(spotType, spotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert spots")
	}

	if !cached {
		spotUpsertCacheMut.Lock()
		spotUpsertCache[key] = cache
		spotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Spot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Spot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Spot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), spotPrimaryKeyMapping)
	sql := "DELETE FROM \"spots\" WHERE \"location_id\"=$1 AND \"tweet_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from spots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for spots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q spotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no spotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Spot slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(spotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"spots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spotPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from spot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for spots")
	}

	if len(spotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Spot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpot(ctx, exec, o.LocationID, o.TweetID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), spotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"spots\".* FROM \"spots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, spotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpotSlice")
	}

	*o = slice

	return nil
}

// SpotExists checks if the Spot row exists.
func SpotExists(ctx context.Context, exec boil.ContextExecutor, locationID int64, tweetID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"spots\" where \"location_id\"=$1 AND \"tweet_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, locationID, tweetID)
	}

	row := exec.QueryRowContext(ctx, sql, locationID, tweetID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if spots exists")
	}

	return exists, nil
}
