// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTrucks(t *testing.T) {
	t.Parallel()

	query := Trucks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTrucksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrucksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Trucks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrucksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TruckSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTrucksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TruckExists(ctx, tx, o.Twitname)
	if err != nil {
		t.Errorf("Unable to check if Truck exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TruckExists to return true, but got false.")
	}
}

func testTrucksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	truckFound, err := FindTruck(ctx, tx, o.Twitname)
	if err != nil {
		t.Error(err)
	}

	if truckFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTrucksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Trucks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTrucksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Trucks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTrucksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	truckOne := &Truck{}
	truckTwo := &Truck{}
	if err = randomize.Struct(seed, truckOne, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}
	if err = randomize.Struct(seed, truckTwo, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = truckOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = truckTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trucks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTrucksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	truckOne := &Truck{}
	truckTwo := &Truck{}
	if err = randomize.Struct(seed, truckOne, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}
	if err = randomize.Struct(seed, truckTwo, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = truckOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = truckTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func truckBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func truckAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Truck) error {
	*o = Truck{}
	return nil
}

func testTrucksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Truck{}
	o := &Truck{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, truckDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Truck object: %s", err)
	}

	AddTruckHook(boil.BeforeInsertHook, truckBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	truckBeforeInsertHooks = []TruckHook{}

	AddTruckHook(boil.AfterInsertHook, truckAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	truckAfterInsertHooks = []TruckHook{}

	AddTruckHook(boil.AfterSelectHook, truckAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	truckAfterSelectHooks = []TruckHook{}

	AddTruckHook(boil.BeforeUpdateHook, truckBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	truckBeforeUpdateHooks = []TruckHook{}

	AddTruckHook(boil.AfterUpdateHook, truckAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	truckAfterUpdateHooks = []TruckHook{}

	AddTruckHook(boil.BeforeDeleteHook, truckBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	truckBeforeDeleteHooks = []TruckHook{}

	AddTruckHook(boil.AfterDeleteHook, truckAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	truckAfterDeleteHooks = []TruckHook{}

	AddTruckHook(boil.BeforeUpsertHook, truckBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	truckBeforeUpsertHooks = []TruckHook{}

	AddTruckHook(boil.AfterUpsertHook, truckAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	truckAfterUpsertHooks = []TruckHook{}
}

func testTrucksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTrucksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(truckColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTruckToManyTwitnameSpots(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Truck
	var b, c Spot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Twitname = a.Twitname
	c.Twitname = a.Twitname

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	spot, err := a.TwitnameSpots().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range spot {
		if v.Twitname == b.Twitname {
			bFound = true
		}
		if v.Twitname == c.Twitname {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TruckSlice{&a}
	if err = a.L.LoadTwitnameSpots(ctx, tx, false, (*[]*Truck)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TwitnameSpots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TwitnameSpots = nil
	if err = a.L.LoadTwitnameSpots(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TwitnameSpots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", spot)
	}
}

func testTruckToManyAddOpTwitnameSpots(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Truck
	var b, c, d, e Spot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, truckDBTypes, false, strmangle.SetComplement(truckPrimaryKeyColumns, truckColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Spot{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spotDBTypes, false, strmangle.SetComplement(spotPrimaryKeyColumns, spotColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Spot{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTwitnameSpots(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Twitname != first.Twitname {
			t.Error("foreign key was wrong value", a.Twitname, first.Twitname)
		}
		if a.Twitname != second.Twitname {
			t.Error("foreign key was wrong value", a.Twitname, second.Twitname)
		}

		if first.R.Twitname != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Twitname != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TwitnameSpots[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TwitnameSpots[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TwitnameSpots().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTrucksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrucksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TruckSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTrucksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trucks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	truckDBTypes = map[string]string{`About`: `text`, `Archive`: `boolean`, `Foursquare`: `text`, `ID`: `text`, `Lastupdate`: `integer`, `Locs`: `ARRAYbigint`, `Name`: `text`, `Retweeted`: `boolean`, `Site`: `text`, `Tweet`: `text`, `Twitname`: `text`, `Type`: `text`, `Weburl`: `text`}
	_            = bytes.MinRead
)

func testTrucksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(truckPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(truckColumns) == len(truckPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, truckDBTypes, true, truckPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTrucksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(truckColumns) == len(truckPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Truck{}
	if err = randomize.Struct(seed, o, truckDBTypes, true, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, truckDBTypes, true, truckPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(truckColumns, truckPrimaryKeyColumns) {
		fields = truckColumns
	} else {
		fields = strmangle.SetComplement(
			truckColumns,
			truckPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TruckSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTrucksUpsert(t *testing.T) {
	t.Parallel()

	if len(truckColumns) == len(truckPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Truck{}
	if err = randomize.Struct(seed, &o, truckDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Truck: %s", err)
	}

	count, err := Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, truckDBTypes, false, truckPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Truck: %s", err)
	}

	count, err = Trucks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
