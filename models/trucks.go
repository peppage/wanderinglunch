// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// Truck is an object representing the database table.
type Truck struct {
	ID         string           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string           `boil:"name" json:"name" toml:"name" yaml:"name"`
	Twitname   string           `boil:"twitname" json:"twitname" toml:"twitname" yaml:"twitname"`
	Weburl     string           `boil:"weburl" json:"weburl" toml:"weburl" yaml:"weburl"`
	Tweet      string           `boil:"tweet" json:"tweet" toml:"tweet" yaml:"tweet"`
	Retweeted  bool             `boil:"retweeted" json:"retweeted" toml:"retweeted" yaml:"retweeted"`
	Lastupdate int              `boil:"lastupdate" json:"lastupdate" toml:"lastupdate" yaml:"lastupdate"`
	Type       string           `boil:"type" json:"type" toml:"type" yaml:"type"`
	About      string           `boil:"about" json:"about" toml:"about" yaml:"about"`
	Foursquare string           `boil:"foursquare" json:"foursquare" toml:"foursquare" yaml:"foursquare"`
	Site       string           `boil:"site" json:"site" toml:"site" yaml:"site"`
	Locs       types.Int64Array `boil:"locs" json:"locs,omitempty" toml:"locs" yaml:"locs,omitempty"`
	Archive    null.Bool        `boil:"archive" json:"archive,omitempty" toml:"archive" yaml:"archive,omitempty"`

	R *truckR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L truckL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TruckColumns = struct {
	ID         string
	Name       string
	Twitname   string
	Weburl     string
	Tweet      string
	Retweeted  string
	Lastupdate string
	Type       string
	About      string
	Foursquare string
	Site       string
	Locs       string
	Archive    string
}{
	ID:         "id",
	Name:       "name",
	Twitname:   "twitname",
	Weburl:     "weburl",
	Tweet:      "tweet",
	Retweeted:  "retweeted",
	Lastupdate: "lastupdate",
	Type:       "type",
	About:      "about",
	Foursquare: "foursquare",
	Site:       "site",
	Locs:       "locs",
	Archive:    "archive",
}

// truckR is where relationships are stored.
type truckR struct {
	Images ImageSlice
	Spots  SpotSlice
}

// NewStruct creates a new relationship struct
func (*truckR) NewStruct() *truckR {
	return &truckR{}
}

// truckL is where Load methods for each relationship are stored.
type truckL struct{}

var (
	truckColumns               = []string{"id", "name", "twitname", "weburl", "tweet", "retweeted", "lastupdate", "type", "about", "foursquare", "site", "locs", "archive"}
	truckColumnsWithoutDefault = []string{"id", "name", "twitname", "site", "locs"}
	truckColumnsWithDefault    = []string{"weburl", "tweet", "retweeted", "lastupdate", "type", "about", "foursquare", "archive"}
	truckPrimaryKeyColumns     = []string{"twitname"}
)

type (
	// TruckSlice is an alias for a slice of pointers to Truck.
	// This should generally be used opposed to []Truck.
	TruckSlice []*Truck
	// TruckHook is the signature for custom Truck hook methods
	TruckHook func(context.Context, boil.ContextExecutor, *Truck) error

	truckQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	truckType                 = reflect.TypeOf(&Truck{})
	truckMapping              = queries.MakeStructMapping(truckType)
	truckPrimaryKeyMapping, _ = queries.BindMapping(truckType, truckMapping, truckPrimaryKeyColumns)
	truckInsertCacheMut       sync.RWMutex
	truckInsertCache          = make(map[string]insertCache)
	truckUpdateCacheMut       sync.RWMutex
	truckUpdateCache          = make(map[string]updateCache)
	truckUpsertCacheMut       sync.RWMutex
	truckUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var truckBeforeInsertHooks []TruckHook
var truckBeforeUpdateHooks []TruckHook
var truckBeforeDeleteHooks []TruckHook
var truckBeforeUpsertHooks []TruckHook

var truckAfterInsertHooks []TruckHook
var truckAfterSelectHooks []TruckHook
var truckAfterUpdateHooks []TruckHook
var truckAfterDeleteHooks []TruckHook
var truckAfterUpsertHooks []TruckHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Truck) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Truck) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Truck) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Truck) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Truck) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Truck) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Truck) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Truck) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Truck) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range truckAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTruckHook registers your hook function for all future operations.
func AddTruckHook(hookPoint boil.HookPoint, truckHook TruckHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		truckBeforeInsertHooks = append(truckBeforeInsertHooks, truckHook)
	case boil.BeforeUpdateHook:
		truckBeforeUpdateHooks = append(truckBeforeUpdateHooks, truckHook)
	case boil.BeforeDeleteHook:
		truckBeforeDeleteHooks = append(truckBeforeDeleteHooks, truckHook)
	case boil.BeforeUpsertHook:
		truckBeforeUpsertHooks = append(truckBeforeUpsertHooks, truckHook)
	case boil.AfterInsertHook:
		truckAfterInsertHooks = append(truckAfterInsertHooks, truckHook)
	case boil.AfterSelectHook:
		truckAfterSelectHooks = append(truckAfterSelectHooks, truckHook)
	case boil.AfterUpdateHook:
		truckAfterUpdateHooks = append(truckAfterUpdateHooks, truckHook)
	case boil.AfterDeleteHook:
		truckAfterDeleteHooks = append(truckAfterDeleteHooks, truckHook)
	case boil.AfterUpsertHook:
		truckAfterUpsertHooks = append(truckAfterUpsertHooks, truckHook)
	}
}

// One returns a single truck record from the query.
func (q truckQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Truck, error) {
	o := &Truck{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trucks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Truck records from the query.
func (q truckQuery) All(ctx context.Context, exec boil.ContextExecutor) (TruckSlice, error) {
	var o []*Truck

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Truck slice")
	}

	if len(truckAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Truck records in the query.
func (q truckQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trucks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q truckQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trucks exists")
	}

	return count > 0, nil
}

// Images retrieves all the image's Images with an executor.
func (o *Truck) Images(mods ...qm.QueryMod) imageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"images\".\"truck_id\"=?", o.Twitname),
	)

	query := Images(queryMods...)
	queries.SetFrom(query.Query, "\"images\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"images\".*"})
	}

	return query
}

// Spots retrieves all the spot's Spots with an executor.
func (o *Truck) Spots(mods ...qm.QueryMod) spotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"spots\".\"truck_id\"=?", o.Twitname),
	)

	query := Spots(queryMods...)
	queries.SetFrom(query.Query, "\"spots\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"spots\".*"})
	}

	return query
}

// LoadImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (truckL) LoadImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTruck interface{}, mods queries.Applicator) error {
	var slice []*Truck
	var object *Truck

	if singular {
		object = maybeTruck.(*Truck)
	} else {
		slice = *maybeTruck.(*[]*Truck)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &truckR{}
		}
		args = append(args, object.Twitname)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &truckR{}
			}

			for _, a := range args {
				if a == obj.Twitname {
					continue Outer
				}
			}

			args = append(args, obj.Twitname)
		}
	}

	query := NewQuery(qm.From(`images`), qm.WhereIn(`truck_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load images")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Images = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &imageR{}
			}
			foreign.R.Truck = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Twitname == foreign.TruckID {
				local.R.Images = append(local.R.Images, foreign)
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.Truck = local
				break
			}
		}
	}

	return nil
}

// LoadSpots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (truckL) LoadSpots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTruck interface{}, mods queries.Applicator) error {
	var slice []*Truck
	var object *Truck

	if singular {
		object = maybeTruck.(*Truck)
	} else {
		slice = *maybeTruck.(*[]*Truck)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &truckR{}
		}
		args = append(args, object.Twitname)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &truckR{}
			}

			for _, a := range args {
				if a == obj.Twitname {
					continue Outer
				}
			}

			args = append(args, obj.Twitname)
		}
	}

	query := NewQuery(qm.From(`spots`), qm.WhereIn(`truck_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spots")
	}

	var resultSlice []*Spot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spots")
	}

	if len(spotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Spots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spotR{}
			}
			foreign.R.Truck = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Twitname == foreign.TruckID {
				local.R.Spots = append(local.R.Spots, foreign)
				if foreign.R == nil {
					foreign.R = &spotR{}
				}
				foreign.R.Truck = local
				break
			}
		}
	}

	return nil
}

// AddImages adds the given related objects to the existing relationships
// of the truck, optionally inserting them as new records.
// Appends related to o.R.Images.
// Sets related.R.Truck appropriately.
func (o *Truck) AddImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Image) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TruckID = o.Twitname
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"truck_id"}),
				strmangle.WhereClause("\"", "\"", 2, imagePrimaryKeyColumns),
			)
			values := []interface{}{o.Twitname, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TruckID = o.Twitname
		}
	}

	if o.R == nil {
		o.R = &truckR{
			Images: related,
		}
	} else {
		o.R.Images = append(o.R.Images, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &imageR{
				Truck: o,
			}
		} else {
			rel.R.Truck = o
		}
	}
	return nil
}

// AddSpots adds the given related objects to the existing relationships
// of the truck, optionally inserting them as new records.
// Appends related to o.R.Spots.
// Sets related.R.Truck appropriately.
func (o *Truck) AddSpots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Spot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TruckID = o.Twitname
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"spots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"truck_id"}),
				strmangle.WhereClause("\"", "\"", 2, spotPrimaryKeyColumns),
			)
			values := []interface{}{o.Twitname, rel.LocationID, rel.TweetID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TruckID = o.Twitname
		}
	}

	if o.R == nil {
		o.R = &truckR{
			Spots: related,
		}
	} else {
		o.R.Spots = append(o.R.Spots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spotR{
				Truck: o,
			}
		} else {
			rel.R.Truck = o
		}
	}
	return nil
}

// Trucks retrieves all the records using an executor.
func Trucks(mods ...qm.QueryMod) truckQuery {
	mods = append(mods, qm.From("\"trucks\""))
	return truckQuery{NewQuery(mods...)}
}

// FindTruck retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTruck(ctx context.Context, exec boil.ContextExecutor, twitname string, selectCols ...string) (*Truck, error) {
	truckObj := &Truck{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trucks\" where \"twitname\"=$1", sel,
	)

	q := queries.Raw(query, twitname)

	err := q.Bind(ctx, exec, truckObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trucks")
	}

	return truckObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Truck) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trucks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(truckColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	truckInsertCacheMut.RLock()
	cache, cached := truckInsertCache[key]
	truckInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			truckColumns,
			truckColumnsWithDefault,
			truckColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(truckType, truckMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trucks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trucks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trucks")
	}

	if !cached {
		truckInsertCacheMut.Lock()
		truckInsertCache[key] = cache
		truckInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Truck.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Truck) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	truckUpdateCacheMut.RLock()
	cache, cached := truckUpdateCache[key]
	truckUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			truckColumns,
			truckPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trucks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trucks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, truckPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, append(wl, truckPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trucks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trucks")
	}

	if !cached {
		truckUpdateCacheMut.Lock()
		truckUpdateCache[key] = cache
		truckUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q truckQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trucks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TruckSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trucks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, truckPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in truck slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all truck")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Truck) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trucks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(truckColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	truckUpsertCacheMut.RLock()
	cache, cached := truckUpsertCache[key]
	truckUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			truckColumns,
			truckColumnsWithDefault,
			truckColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			truckColumns,
			truckPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert trucks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(truckPrimaryKeyColumns))
			copy(conflict, truckPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trucks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(truckType, truckMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(truckType, truckMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trucks")
	}

	if !cached {
		truckUpsertCacheMut.Lock()
		truckUpsertCache[key] = cache
		truckUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Truck record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Truck) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Truck provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), truckPrimaryKeyMapping)
	sql := "DELETE FROM \"trucks\" WHERE \"twitname\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trucks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q truckQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no truckQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trucks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trucks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TruckSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Truck slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(truckBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trucks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, truckPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from truck slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trucks")
	}

	if len(truckAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Truck) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTruck(ctx, exec, o.Twitname)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TruckSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TruckSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), truckPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trucks\".* FROM \"trucks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, truckPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TruckSlice")
	}

	*o = slice

	return nil
}

// TruckExists checks if the Truck row exists.
func TruckExists(ctx context.Context, exec boil.ContextExecutor, twitname string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trucks\" where \"twitname\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, twitname)
	}

	row := exec.QueryRowContext(ctx, sql, twitname)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trucks exists")
	}

	return exists, nil
}
