// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTweets(t *testing.T) {
	t.Parallel()

	query := Tweets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTweetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTweetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tweets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTweetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TweetSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTweetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TweetExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Tweet exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TweetExists to return true, but got false.")
	}
}

func testTweetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tweetFound, err := FindTweet(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tweetFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTweetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tweets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTweetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tweets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTweetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tweetOne := &Tweet{}
	tweetTwo := &Tweet{}
	if err = randomize.Struct(seed, tweetOne, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}
	if err = randomize.Struct(seed, tweetTwo, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tweetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tweetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tweets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTweetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tweetOne := &Tweet{}
	tweetTwo := &Tweet{}
	if err = randomize.Struct(seed, tweetOne, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}
	if err = randomize.Struct(seed, tweetTwo, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tweetOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tweetTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tweetBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func tweetAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tweet) error {
	*o = Tweet{}
	return nil
}

func testTweetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Tweet{}
	o := &Tweet{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tweetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tweet object: %s", err)
	}

	AddTweetHook(boil.BeforeInsertHook, tweetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tweetBeforeInsertHooks = []TweetHook{}

	AddTweetHook(boil.AfterInsertHook, tweetAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tweetAfterInsertHooks = []TweetHook{}

	AddTweetHook(boil.AfterSelectHook, tweetAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tweetAfterSelectHooks = []TweetHook{}

	AddTweetHook(boil.BeforeUpdateHook, tweetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tweetBeforeUpdateHooks = []TweetHook{}

	AddTweetHook(boil.AfterUpdateHook, tweetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tweetAfterUpdateHooks = []TweetHook{}

	AddTweetHook(boil.BeforeDeleteHook, tweetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tweetBeforeDeleteHooks = []TweetHook{}

	AddTweetHook(boil.AfterDeleteHook, tweetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tweetAfterDeleteHooks = []TweetHook{}

	AddTweetHook(boil.BeforeUpsertHook, tweetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tweetBeforeUpsertHooks = []TweetHook{}

	AddTweetHook(boil.AfterUpsertHook, tweetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tweetAfterUpsertHooks = []TweetHook{}
}

func testTweetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTweetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tweetColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTweetToManySpots(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tweet
	var b, c Spot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TweetID = a.ID
	c.TweetID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	spot, err := a.Spots().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range spot {
		if v.TweetID == b.TweetID {
			bFound = true
		}
		if v.TweetID == c.TweetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TweetSlice{&a}
	if err = a.L.LoadSpots(ctx, tx, false, (*[]*Tweet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Spots = nil
	if err = a.L.LoadSpots(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Spots); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", spot)
	}
}

func testTweetToManyAddOpSpots(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tweet
	var b, c, d, e Spot

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tweetDBTypes, false, strmangle.SetComplement(tweetPrimaryKeyColumns, tweetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Spot{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, spotDBTypes, false, strmangle.SetComplement(spotPrimaryKeyColumns, spotColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Spot{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpots(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TweetID {
			t.Error("foreign key was wrong value", a.ID, first.TweetID)
		}
		if a.ID != second.TweetID {
			t.Error("foreign key was wrong value", a.ID, second.TweetID)
		}

		if first.R.Tweet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tweet != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Spots[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Spots[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Spots().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTweetToOneTruckUsingTruck(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tweet
	var foreign Truck

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TruckID = foreign.Twitname
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Truck().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Twitname != foreign.Twitname {
		t.Errorf("want: %v, got %v", foreign.Twitname, check.Twitname)
	}

	slice := TweetSlice{&local}
	if err = local.L.LoadTruck(ctx, tx, false, (*[]*Tweet)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Truck == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Truck = nil
	if err = local.L.LoadTruck(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Truck == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTweetToOneSetOpTruckUsingTruck(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tweet
	var b, c Truck

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tweetDBTypes, false, strmangle.SetComplement(tweetPrimaryKeyColumns, tweetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, truckDBTypes, false, strmangle.SetComplement(truckPrimaryKeyColumns, truckColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, truckDBTypes, false, strmangle.SetComplement(truckPrimaryKeyColumns, truckColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Truck{&b, &c} {
		err = a.SetTruck(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Truck != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tweets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TruckID != x.Twitname {
			t.Error("foreign key was wrong value", a.TruckID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TruckID))
		reflect.Indirect(reflect.ValueOf(&a.TruckID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TruckID != x.Twitname {
			t.Error("foreign key was wrong value", a.TruckID, x.Twitname)
		}
	}
}

func testTweetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTweetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TweetSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTweetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tweets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tweetDBTypes = map[string]string{`Done`: `boolean`, `ID`: `text`, `Retweeted`: `boolean`, `Text`: `text`, `Time`: `bigint`, `TruckID`: `text`}
	_            = bytes.MinRead
)

func testTweetsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tweetPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tweetColumns) == len(tweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTweetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tweetColumns) == len(tweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tweet{}
	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tweetDBTypes, true, tweetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tweetColumns, tweetPrimaryKeyColumns) {
		fields = tweetColumns
	} else {
		fields = strmangle.SetComplement(
			tweetColumns,
			tweetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TweetSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTweetsUpsert(t *testing.T) {
	t.Parallel()

	if len(tweetColumns) == len(tweetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Tweet{}
	if err = randomize.Struct(seed, &o, tweetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tweet: %s", err)
	}

	count, err := Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tweetDBTypes, false, tweetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tweet: %s", err)
	}

	count, err = Tweets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
