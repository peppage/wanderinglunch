// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Images", testImages)
	t.Run("Locations", testLocations)
	t.Run("Messages", testMessages)
	t.Run("Sites", testSites)
	t.Run("Subs", testSubs)
	t.Run("Trucks", testTrucks)
	t.Run("Tweets", testTweets)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Images", testImagesDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("Sites", testSitesDelete)
	t.Run("Subs", testSubsDelete)
	t.Run("Trucks", testTrucksDelete)
	t.Run("Tweets", testTweetsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Images", testImagesQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("Sites", testSitesQueryDeleteAll)
	t.Run("Subs", testSubsQueryDeleteAll)
	t.Run("Trucks", testTrucksQueryDeleteAll)
	t.Run("Tweets", testTweetsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Images", testImagesSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("Sites", testSitesSliceDeleteAll)
	t.Run("Subs", testSubsSliceDeleteAll)
	t.Run("Trucks", testTrucksSliceDeleteAll)
	t.Run("Tweets", testTweetsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Images", testImagesExists)
	t.Run("Locations", testLocationsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("Sites", testSitesExists)
	t.Run("Subs", testSubsExists)
	t.Run("Trucks", testTrucksExists)
	t.Run("Tweets", testTweetsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Images", testImagesFind)
	t.Run("Locations", testLocationsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("Sites", testSitesFind)
	t.Run("Subs", testSubsFind)
	t.Run("Trucks", testTrucksFind)
	t.Run("Tweets", testTweetsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Images", testImagesBind)
	t.Run("Locations", testLocationsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("Sites", testSitesBind)
	t.Run("Subs", testSubsBind)
	t.Run("Trucks", testTrucksBind)
	t.Run("Tweets", testTweetsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Images", testImagesOne)
	t.Run("Locations", testLocationsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("Sites", testSitesOne)
	t.Run("Subs", testSubsOne)
	t.Run("Trucks", testTrucksOne)
	t.Run("Tweets", testTweetsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Images", testImagesAll)
	t.Run("Locations", testLocationsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("Sites", testSitesAll)
	t.Run("Subs", testSubsAll)
	t.Run("Trucks", testTrucksAll)
	t.Run("Tweets", testTweetsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Images", testImagesCount)
	t.Run("Locations", testLocationsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("Sites", testSitesCount)
	t.Run("Subs", testSubsCount)
	t.Run("Trucks", testTrucksCount)
	t.Run("Tweets", testTweetsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Images", testImagesHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("Sites", testSitesHooks)
	t.Run("Subs", testSubsHooks)
	t.Run("Trucks", testTrucksHooks)
	t.Run("Tweets", testTweetsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Images", testImagesInsert)
	t.Run("Images", testImagesInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("Sites", testSitesInsert)
	t.Run("Sites", testSitesInsertWhitelist)
	t.Run("Subs", testSubsInsert)
	t.Run("Subs", testSubsInsertWhitelist)
	t.Run("Trucks", testTrucksInsert)
	t.Run("Trucks", testTrucksInsertWhitelist)
	t.Run("Tweets", testTweetsInsert)
	t.Run("Tweets", testTweetsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Images", testImagesReload)
	t.Run("Locations", testLocationsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("Sites", testSitesReload)
	t.Run("Subs", testSubsReload)
	t.Run("Trucks", testTrucksReload)
	t.Run("Tweets", testTweetsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Images", testImagesReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("Sites", testSitesReloadAll)
	t.Run("Subs", testSubsReloadAll)
	t.Run("Trucks", testTrucksReloadAll)
	t.Run("Tweets", testTweetsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Images", testImagesSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("Sites", testSitesSelect)
	t.Run("Subs", testSubsSelect)
	t.Run("Trucks", testTrucksSelect)
	t.Run("Tweets", testTweetsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Images", testImagesUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("Sites", testSitesUpdate)
	t.Run("Subs", testSubsUpdate)
	t.Run("Trucks", testTrucksUpdate)
	t.Run("Tweets", testTweetsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Images", testImagesSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("Sites", testSitesSliceUpdateAll)
	t.Run("Subs", testSubsSliceUpdateAll)
	t.Run("Trucks", testTrucksSliceUpdateAll)
	t.Run("Tweets", testTweetsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
