// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSpots(t *testing.T) {
	t.Parallel()

	query := Spots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSpotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Spots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpotSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSpotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SpotExists(ctx, tx, o.LocationID, o.TweetID)
	if err != nil {
		t.Errorf("Unable to check if Spot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SpotExists to return true, but got false.")
	}
}

func testSpotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	spotFound, err := FindSpot(ctx, tx, o.LocationID, o.TweetID)
	if err != nil {
		t.Error(err)
	}

	if spotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSpotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Spots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSpotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Spots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSpotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	spotOne := &Spot{}
	spotTwo := &Spot{}
	if err = randomize.Struct(seed, spotOne, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}
	if err = randomize.Struct(seed, spotTwo, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Spots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSpotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	spotOne := &Spot{}
	spotTwo := &Spot{}
	if err = randomize.Struct(seed, spotOne, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}
	if err = randomize.Struct(seed, spotTwo, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = spotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = spotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func spotBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func spotAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Spot) error {
	*o = Spot{}
	return nil
}

func testSpotsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Spot{}
	o := &Spot{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, spotDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Spot object: %s", err)
	}

	AddSpotHook(boil.BeforeInsertHook, spotBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	spotBeforeInsertHooks = []SpotHook{}

	AddSpotHook(boil.AfterInsertHook, spotAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	spotAfterInsertHooks = []SpotHook{}

	AddSpotHook(boil.AfterSelectHook, spotAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	spotAfterSelectHooks = []SpotHook{}

	AddSpotHook(boil.BeforeUpdateHook, spotBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	spotBeforeUpdateHooks = []SpotHook{}

	AddSpotHook(boil.AfterUpdateHook, spotAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	spotAfterUpdateHooks = []SpotHook{}

	AddSpotHook(boil.BeforeDeleteHook, spotBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	spotBeforeDeleteHooks = []SpotHook{}

	AddSpotHook(boil.AfterDeleteHook, spotAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	spotAfterDeleteHooks = []SpotHook{}

	AddSpotHook(boil.BeforeUpsertHook, spotBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	spotBeforeUpsertHooks = []SpotHook{}

	AddSpotHook(boil.AfterUpsertHook, spotAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	spotAfterUpsertHooks = []SpotHook{}
}

func testSpotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(spotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSpotToOneTruckUsingTruck(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Spot
	var foreign Truck

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, truckDBTypes, false, truckColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Truck struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TruckID = foreign.Twitname
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Truck().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Twitname != foreign.Twitname {
		t.Errorf("want: %v, got %v", foreign.Twitname, check.Twitname)
	}

	slice := SpotSlice{&local}
	if err = local.L.LoadTruck(ctx, tx, false, (*[]*Spot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Truck == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Truck = nil
	if err = local.L.LoadTruck(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Truck == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpotToOneLocationUsingLocation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Spot
	var foreign Location

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, locationDBTypes, false, locationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Location struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LocationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Location().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SpotSlice{&local}
	if err = local.L.LoadLocation(ctx, tx, false, (*[]*Spot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Location == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Location = nil
	if err = local.L.LoadLocation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Location == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpotToOneTweetUsingTweet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Spot
	var foreign Tweet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, spotDBTypes, false, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tweetDBTypes, false, tweetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tweet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TweetID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tweet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SpotSlice{&local}
	if err = local.L.LoadTweet(ctx, tx, false, (*[]*Spot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tweet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tweet = nil
	if err = local.L.LoadTweet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tweet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSpotToOneSetOpTruckUsingTruck(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Spot
	var b, c Truck

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spotDBTypes, false, strmangle.SetComplement(spotPrimaryKeyColumns, spotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, truckDBTypes, false, strmangle.SetComplement(truckPrimaryKeyColumns, truckColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, truckDBTypes, false, strmangle.SetComplement(truckPrimaryKeyColumns, truckColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Truck{&b, &c} {
		err = a.SetTruck(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Truck != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TruckID != x.Twitname {
			t.Error("foreign key was wrong value", a.TruckID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TruckID))
		reflect.Indirect(reflect.ValueOf(&a.TruckID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TruckID != x.Twitname {
			t.Error("foreign key was wrong value", a.TruckID, x.Twitname)
		}
	}
}
func testSpotToOneSetOpLocationUsingLocation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Spot
	var b, c Location

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spotDBTypes, false, strmangle.SetComplement(spotPrimaryKeyColumns, spotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, locationDBTypes, false, strmangle.SetComplement(locationPrimaryKeyColumns, locationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, locationDBTypes, false, strmangle.SetComplement(locationPrimaryKeyColumns, locationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Location{&b, &c} {
		err = a.SetLocation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Location != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LocationID != x.ID {
			t.Error("foreign key was wrong value", a.LocationID)
		}

		if exists, err := SpotExists(ctx, tx, a.LocationID, a.TweetID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testSpotToOneSetOpTweetUsingTweet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Spot
	var b, c Tweet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, spotDBTypes, false, strmangle.SetComplement(spotPrimaryKeyColumns, spotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tweetDBTypes, false, strmangle.SetComplement(tweetPrimaryKeyColumns, tweetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tweetDBTypes, false, strmangle.SetComplement(tweetPrimaryKeyColumns, tweetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tweet{&b, &c} {
		err = a.SetTweet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tweet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Spots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TweetID != x.ID {
			t.Error("foreign key was wrong value", a.TweetID)
		}

		if exists, err := SpotExists(ctx, tx, a.LocationID, a.TweetID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testSpotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SpotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSpotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Spots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	spotDBTypes = map[string]string{`LocationID`: `bigint`, `TruckID`: `text`, `TweetID`: `text`}
	_           = bytes.MinRead
)

func testSpotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(spotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(spotColumns) == len(spotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spotDBTypes, true, spotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSpotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(spotColumns) == len(spotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Spot{}
	if err = randomize.Struct(seed, o, spotDBTypes, true, spotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, spotDBTypes, true, spotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(spotColumns, spotPrimaryKeyColumns) {
		fields = spotColumns
	} else {
		fields = strmangle.SetComplement(
			spotColumns,
			spotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SpotSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSpotsUpsert(t *testing.T) {
	t.Parallel()

	if len(spotColumns) == len(spotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Spot{}
	if err = randomize.Struct(seed, &o, spotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Spot: %s", err)
	}

	count, err := Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, spotDBTypes, false, spotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Spot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Spot: %s", err)
	}

	count, err = Spots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
