package model

import (
	"fmt"
	"strconv"

	"github.com/pmylund/go-cache"
)

/**
 * @apiDefine Message
 * @apiParam {Number} id The autogenerated id of the message
 * @apiParam {String} message The text of the message
 * @apiParam {Number} Date The date this message was saved in epoch
 */
type Message struct {
	ID      int    `json:"id"`
	Message string `json:"message"`
	Date    int64  `json:"date"`
}

func AddMessage(m Message) bool {
	result, err := db.Exec(`INSERT INTO messages (message, date) VALUES ($1, $2)`, m.Message, m.Date)
	if err != nil {
		fmt.Println(err)
	}
	if result != nil {
		Cache.Delete("message1")
		return true
	}
	return false
}

func GetMessage(amount int) Message {
	var message Message
	if object, found := Cache.Get("message" + strconv.Itoa(amount)); found {
		message = object.(Message)
	} else {
		err := db.QueryRowx(`SELECT message,date FROM messages ORDER BY id DESC LIMIT ` + strconv.Itoa(amount)).StructScan(&message)
		if err != nil {
			fmt.Println(err)
		}
		Cache.Set("message"+strconv.Itoa(amount), message, cache.DefaultExpiration)
	}
	return message
}
