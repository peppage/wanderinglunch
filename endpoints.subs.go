package main

import (
	"net/http"
	"strconv"

	"wanderinglunch/model"

	"github.com/labstack/echo"
)

/**
 * @api {get} /subs List Substitutions
 * @apiName GetSubs
 * @apiDescription To get an array of all the substitutions in the database
 * @apiVersion 1.0.0
 * @apiGroup Substitutions
 * @apiExample {GET} Example usage:
 *     http://api.wanderinglunch.com/subs
 * @apiSuccessExample {json} Success-Response:
 *  [
 *    {
 *      "id": 1,
 *      "regex": "\.",
 *      "replacement": " "
 *    },
 *    {
 *      "id": 2,
 *      "regex": "-",
 *      "replacement": " "
 *    }
 *  ]
 */
func substitutions(c *echo.Context) error {
	return c.JSON(http.StatusOK, model.GetSubs())
}

/**
 * @api {get} /subs/:id Get Substitution
 * @apiName GetSub
 * @apiDescription Get a substition by id
 * @apiVersion 1.0.0
 * @apiParam {Number} id Autogenerated id of the substition
 * @apiGroup Substitutions
 * @apiExample {GET} Example usage:
 *     http://api.wanderinglunch.com/subs/1
 * @apiSuccessExample {json} Success-Response:
 *  {
 *    "id": 1,
 *    "regex": "\.",
 *    "replacement": " "
 *  }
 */
func subsitution(c *echo.Context) error {
	var ae apiErrors
	sub := model.GetSub(c.Param("id"))
	if sub.ID == 0 {
		ae.Errors = append(ae.Errors, apiError{Message: "No substitution with that id found"})
		return c.JSON(http.StatusNotFound, ae)
	}
	return c.JSON(http.StatusOK, sub)
}

/**
 * @api {post} /subs Create a new substitution
 * @apiName NewSub
 * @apiDescription Save a new substition
 * @apiVersion 1.0.0
 * @apiUse Sub
 * @apiGroup Substitutions
 */
func subInsert(c *echo.Context) error {
	s := model.SubMarshal(c)
	if model.AddSub(s) {
		return c.JSON(http.StatusOK, model.GetSubByRegex(s.Regex))
	}
	return c.JSON(http.StatusBadRequest, nil)
}

/**
 * @api {put} /subs/:id Update a substitution
 * @apiName UpdateSub
 * @apiDescription Update a substition
 * @apiVersion 1.0.0
 * @apiParam {Number} id Id of the sub to update
 * @apiUse Sub
 * @apiGroup Substitutions
 */
func subUpdate(c *echo.Context) error {
	s := model.SubMarshal(c)
	s.ID, _ = strconv.Atoi(c.Param("id"))
	if model.UpdateSub(s) {
		return c.JSON(http.StatusOK, model.GetSub(c.Param("id")))
	}
	return c.JSON(http.StatusBadRequest, nil)
}

/**
 * @api {delete} /subs/:id Delete a substitution
 * @apiName DeleteSub
 * @apiVersion 1.0.0
 * @apiParam {Number} id Id of the sub to delete
 * @apiGroup Substitutions
 */
func subDelete(c *echo.Context) error {
	if model.DeleteSub(c.Param("id")) {
		return c.JSON(http.StatusNoContent, nil)
	}
	return c.JSON(http.StatusInternalServerError, nil)
}
