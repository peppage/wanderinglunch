<h1>Locations</h1>

<input id="search" type="search" name="search" placeholder="Search..."
	   data-bind="value: query, valueUpdate: 'keyup'" autocomplete="off" />
<table class="table table-minimal">
	<thead>
		<tr>
			<th>Display</th>
			<th></th>
		</tr>
	</thead>
	<tbody data-bind="foreach: results">
		<td><a data-bind="attr: { href: '/admin/location/'+id }"><span data-bind="text: display"></span></a></td>
		<td><a data-bind="click: $parent.delete">delete</a></td>
	</tbody>
</table>
<div data-bind="ifnot: query().length">
	<button data-bind="click: prev, visible: hasPrevious">Prev</button>
	<button data-bind="click: next, visible: hasNext">Next</button>
</div>


<script type="text/javascript">
	document.addEventListener('DOMContentLoaded', function() {
		ko.applyBindings(new AdminLocs());	
	});
	
	function AdminLocs() {
		var self = this;
		self.locs = ko.observableArray([]);
		self.pageNumber = ko.observable(0);
		self.perPage = 10;
		self.query = ko.observable('');

		$.getJSON('/api/locations', function(data) {
  			self.locs(data);
		});

		self.totalPages = ko.computed(function() {
			var div = Math.floor(self.locs().length / self.perPage);
			div += self.locs().length % self.perPage > 0 ? 1 : 0;
			return div - 1;
		});

		self.paginated = ko.computed(function() {
			var first = self.pageNumber() * self.perPage;
			return self.locs().slice(first, first + self.perPage);
		});

		self.hasPrevious = ko.computed(function() {
			return self.pageNumber() !== 0;
		});

		self.hasNext = ko.computed(function() {
			return self.pageNumber() !== self.totalPages;
		});

		self.next = function() {
			if(self.pageNumber() < self.totalPages()) {
				self.pageNumber(self.pageNumber() + 1);
			}
		};

		self.prev = function() {
			if(self.pageNumber() !== 0) {
				self.pageNumber(self.pageNumber() - 1);
			}
		};

		self.delete = function(loc) {
			$.ajax({
			    url: '/api/locations/' + loc.id + '/delete',
			    type: 'DELETE',
			    success: function(data) {
			        console.log(data);
					self.trucks.remove(loc);
			    }
			});
		};

		self.results = ko.computed(function() {
			var items = ko.utils.arrayFilter(self.locs(), function(item) {
				return item.display.toLowerCase().indexOf(self.query().toLowerCase()) >= 0;
			});
			if(items.length < self.perPage) {
				self.pageNumber(0);
			}
			var first = self.pageNumber() * self.perPage;
			return items.slice(first, first + self.perPage);
		});
	}
</script>